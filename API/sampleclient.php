<?php
/**
 * sampleclient.php -- API Client Sample Program 
 * 
 * Author: Steve Bourgeois <owl@bozzit.com>
 * 
 * Copyright (c) 2006-2014 Bozz IT Consulting Inc
 *
 * Licensed under the GNU GPL. For full terms see the file LICENSE.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

include('./lib/client.lib.php');

$sUrl = 'http://www.example.com/doxbox/API/serverapi.php';

$sAPIKey = urlencode('<API KEY GENERATED BY genapikey.php>');

/**************************
* Print The API Version 
***************************/
print ("<br />BEFORE API version <br />");
$fields = array('CallFunction' => urlencode('Version')); // Method to call

$sApiResult = fDmsApiClient($fields);
print("<xmp>" . $sApiResult . "</xmp>");


/**************************
* Authenticate to Owl
***************************/
print ("<br />BEFORE VerifyCredential <br />");
$fields = array('CallFunction' => urlencode('VerifyCredential'), // Method to call
                'Args[0]' => urlencode('admin'),  // Username
                'Args[1]' => urlencode('admin'),  // Passwords
                'Args[2]' => $sAPIKey             // API Key 

	);

$sApiResult = fDmsApiClient($fields);

/**
* The Default return mode is JSON, since the APIKey is checked in the construct of the class
* the result in the case of API Key failiure will be a JSON obect. So For this Call we need
* To make sure its not JSON Object before trying to parse the XML.
*/

if (isJson($sApiResult))
{
   /**
   * Print the Error Code Or add Error Handling here
   */
   print("<xmp>" . $sApiResult . "</xmp>");
   exit;
}
else // We probably got a login error OR a session ID but assume all is OK
{
   libxml_use_internal_errors(true);
   $oApiResult = new SimpleXMLElement('<dms_response />');
   $oApiResult = simplexml_load_string($sApiResult);
   if (!$oApiResult)
   {
      print("<xmp>" . $sApiResult . "</xmp>");
      exit;
   }
}

print("<xmp>" . $sApiResult . "</xmp>");

/**************************
* Create a New Group 
***************************/
print("<br />BEFORE Create New Group <br />");

$fields = array('CallFunction' => urlencode('AddGroup'), // Method to call
                'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl ADMIN Session
                'Args[1]' => urlencode('tesgroup') // Group Name username
        );

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

// No error checking just assume we have a new group
// Extract the XML resonse so we can get a the new Group ID

$oNewGroupResult = new SimpleXMLElement('<dms_response />');
$oNewGroupResult = simplexml_load_string($sApiResult);

/**************************
* Create a New User 
***************************/
print("<br />BEFORE Create New User <br />");

$fields = array('CallFunction' => urlencode('AddUser'), // Method to call
                'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl ADMIN Session
                'Args[1]' => urlencode('testuser'), // Users username
                'Args[2]' => urlencode('admin'), // Users Password
                'Args[3]' => urlencode((string) $oNewGroupResult->new_group_id), // Users GroupID  0 = Administrator 3 = Users 
                'Args[4]' => urlencode('Test User One'), // Name of the New User
                'Args[5]' => urlencode('1'), // Users Home Directory 1 = Documents 
                'Args[6]' => urlencode('0'), // is Group Admin 1 or 0
                'Args[7]' => urlencode('0') // Quota in bytes = 0 No Quota

        );

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

/*************************
* Create a Single Folder
***************************/
print("<br />BEFORE Create Folder <br />");

$fields = array('CallFunction' => urlencode('CreateFolder'), // Method to call
                'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl Session
                'Args[1]' => urlencode('1'), // Doxbox ROOT Folder ID is 1
                'Args[2]' => urlencode('Sample Folder') // Name of the New Folder
        );

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

$oCreateFolderResult = new SimpleXMLElement('<dms_response />');
$oCreateFolderResult = simplexml_load_string($sApiResult);

//Assume success code = 0001
//Need to add checking logic and take appropriate 
//Action before you upload the File


/**************************
* Upload a Single file
***************************/
print("<br />BEFORE File Upload<br />");

$fields = array('CallFunction' => urlencode('UploadFile'), // Method to call
                'file_contents'=> '@' . realpath('./upload/oak-sawfly-larva.jpg'),
		'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl Session
                'Args[1]' => urlencode($oCreateFolderResult->new_folder_id) // Folder ID of the Sample Folder Created Above
	);

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

$oCreateFileResult = new SimpleXMLElement('<dms_response />');
$oCreateFileResult = simplexml_load_string($sApiResult);


/**************************
* Update  a Single file
***************************/
print("<br />BEFORE File Update <br />");

$fields = array('CallFunction' => urlencode('UpdateFile'), // Method to call
                'file_contents'=> '@' . realpath('./upload/update/animal.jpg'),
                'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl Session
                'Args[1]' => urlencode($oCreateFileResult->new_file_id), // File ID of the Sample File Created above
                'Args[2]' => 'major'  // Version change either major or minor DEFAULTS To minor
	);

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

/**************************
* Download  a Single file
***************************/
print("<br />BEFORE File Download <br />");

$aCustomHeaders['test']  = 'test value';
$aCustomHeaders['test2'] = 'test2 value';

$fields = array('CallFunction' => urlencode('DownloadFile'), // Method to call
                'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl Session
                'Args[1]' => urlencode($oCreateFileResult->new_file_id), // File ID of the Sample File Created above
                'Args[2]' => urlencode(gzcompress(serialize($aCustomHeaders))),
                'Args[3]' => true   // return file in zip file  true  Default False
	);

$aDownloadFileResult = fDmsApiClient($fields, 1);

if (isJson($aDownloadFileResult['body']))
{
   /**
   * Print the Error Code Or add Error Handling here
   */
   print("<xmp>" . $aDownloadFileResult['body'] . "</xmp>");
}
else 
{
   libxml_use_internal_errors(true);
   $oResult = new SimpleXMLElement('<dms_response />');
   $oResult = simplexml_load_string($aDownloadFileResult['body']);
   if (!$oResult)
   {
      print("<br />Printing Parsed headers that give file info<br />");
      print("<pre>");
      $aHeaderContent = http_parse_headers($aDownloadFileResult['header']);
      print_r($aHeaderContent);
    //print($aDownloadFileResult['body']);
      print("</pre>");
      $fp = fopen ('./download/'. $aHeaderContent['Content-Location'], 'w+');
      fwrite($fp, $aDownloadFileResult['body']);
      # close local file
      fclose( $fp );
   }
   else
   {
      print("<xmp>" . $aDownloadFileResult['body'] . "</xmp>");
   }
}



/**************************
* Delete a File By File ID
***************************/
print("<br />BEFORE Delete File<br />");

$fields = array('CallFunction' => urlencode('DeleteFile'), // Method to call
		'Args[0]' => urlencode((string) $oApiResult->sessid), // Valid Owl Session
		'Args[1]' => urlencode("FILEID") // Owl File ID to Delete
	);

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

/**************************
* Logout / destroy the  Owl Session
***************************/
print ("<br />BEFORE Logout<br />");

$fields = array('CallFunction' => urlencode('Logout'), // Method to call
		'Args[0]' => urlencode((string) $oApiResult->sessid) // Valid Owl Session 
	);

$sApiResult = fDmsApiClient($fields);

print("<xmp>$sApiResult</xmp>");

